@page "/excelcsharp"
@using ResultSetInterpreter.Services.Interfaces
@using ResultSetInterpreter.Models.Benchmark

<MudPaper Elevation="3" class="my-3 mx-3 py-5 px-3">
    <MudGrid Justify="Justify.Center">
        <MudItem xs="12">
            <MudText Align="Align.Center" Typo="Typo.h3">Excel File to C# Code Generator</MudText>
        </MudItem>
        @if (_error != null)
        {
            <MudItem xs="12">
                <MudAlert Severity="Severity.Error">@_error</MudAlert>
            </MudItem>
        }
        <MudItem xs="12">
            <MudButton OnClick="PickFile" FullWidth="true" Variant="Variant.Filled" Color="Color.Primary">Select File</MudButton>
        </MudItem>
        <MudItem xs="12">
            <MudPaper Elevation="5">
                @if (_fileName != null)
                {
                    <MudText Typo="Typo.h6">Result for @_fileName</MudText>
                }
                @if (_isLoading)
                {
                    <MudSkeleton SkeletonType="SkeletonType.Rectangle" Height="150px" />
                }
                else
                {
                    <MudTextField T="string" Text="@(_result ?? "Please select a file")" AutoGrow Lines="3"/>
                }
            </MudPaper>
        </MudItem>
        @if (_file != null)
        {
            <MudItem xs="12">
                <MudNumericField @bind-Value="_numberOfIterations" Label="Number of Iterations" Variant="Variant.Text" />
                <MudButton OnClick="RunBenchmark" FullWidth="true" Variant="Variant.Filled" Color="Color.Secondary">Run Benchmark</MudButton>
            </MudItem>
        }
        @if(_isBenchmarkRunning)
        {
            <MudItem xs="12">
                <MudAlert Severity="Severity.Info">Running Benchmark...</MudAlert>
            </MudItem>
        }
        @if (_benchmarkResult != null)
        {
            <MudItem xs="12" md="6">
                <MudSimpleTable>
                    <thead>
                    <tr>
                        <th>Iteration #</th>
                        <th>Time (in milliseconds)</th>
                    </tr>
                    @for(int i = 0; i < _benchmarkResult.ExecutionTimes.Count; i++)
                    {
                        <tr>
                            <td>
                                @(i + 1)
                            </td>
                            <td>
                                @(_benchmarkResult.ExecutionTimes[i])
                            </td>
                        </tr>
                    }
                    </thead>
                </MudSimpleTable>
            </MudItem>
            if (_chartSeries != null && _xAxisLabels != null)
            {
                <MudItem xs="12" md="6">
                    <MudChart ChartType="ChartType.Line" ChartSeries="_chartSeries" ChartOptions="_chartOptions" XAxisLabels="_xAxisLabels" Width="100%" Height="400px" />
                </MudItem>
            }
        }
    </MudGrid>
</MudPaper>

<!--
<h1>Hello, world!</h1>

<br />

<button class="btn btn-primary" @onclick="PickFile">Pick File</button>

<br />

@if (_isLoading)
{
    <h4>Loading...</h4>
}

@if (_error != null)
{
    <h3 class="alert-danger">@_error</h3>
}

@if(_result != null)
{
    <pre>@_result</pre>
}

<h3>Benchmark</h3>
<br/>
<input type="number" @bind="_numberOfIterations" class="form-control"/>
<br/>
<button class="btn btn-secondary" @onclick="RunBenchmark">Run Benchmark</button>

@if (_isBenchmarkRunning)
{
    <br />
    <h4>Running Benchmark...</h4>
}

@if (_benchmarkResult != null)
{
    <p>Average Runtime: @_benchmarkResult.AverageTime</p>
    <p>Lowest Runtime: @_benchmarkResult.MinTime</p>
    <p>Median Runtime: @_benchmarkResult.MedianTime</p>
    <p>Highest Runtime: @_benchmarkResult.MaxTime</p>
    
    <br />
    
    <table class="table">
        <thead>
        <tr>
            <th>Iteration</th>
            <th>Runtime</th>
        </tr>
        </thead>
        @for (int i = 0; i < _benchmarkResult.ExecutionTimes.Count; i++)
        {
            <tr>
                <td>@(i + 1)</td>
                <td>@(_benchmarkResult.ExecutionTimes[i])</td>
            </tr>
        }
    </table>
}

-->

@code {

    [Inject] public IExcelToCSharpService ExcelToCSharpService { get; set; } = default!;
    [Inject] public IFilePickerService FilePicker { get; set; } = default!;
    [Inject] public IBenchmarkService BenchmarkService { get; set; } = default!;

    private Stream? _file = null;
    private int _numberOfIterations = 1;
    private BenchmarkResult? _benchmarkResult = null;
    private List<ChartSeries>? _chartSeries = null;
    private ChartOptions? _chartOptions = null;
    private string[]? _xAxisLabels = null;
    private bool _isBenchmarkRunning;
    
    private string? _result;
    private string? _error;
    private string? _fileName;
    private bool _isLoading;
    
    public async Task PickFile()
    {
        _isLoading = true;
        _result = null;
        _error = null;
        try
        {
            (_file, _fileName) = await FilePicker.PickFileAndNameAsync();

            if (_file == null)
            {
                throw new Exception("No File Selected");
            }
            
            _result = await ExcelToCSharpService.ConvertExcelToCSharpAsync(_file);
            
        }
        catch (Exception e)
        {
            _error = e.Message;
            _fileName = null;
        }

        _isLoading = false;
    }

    public async Task RunBenchmark()
    {
        try
        {
            // Validate there is a file loaded
            if (_file == null)
            {
                _error = "Cannot run benchmark, no file selected";
                return;
            }
            
            // Validate number of iterations is 1 or greater
            if (_numberOfIterations < 1)
            {
                _error = "Number of iterations must be 1 or greater";
                return;
            }
            
            _isBenchmarkRunning = true;
            _error = null;
            _benchmarkResult = null;
            _chartSeries = null;
            _xAxisLabels = null;

            BenchmarkRequest request = new()
            {
                Method = async () =>
                {
                    await ExcelToCSharpService.ConvertExcelToCSharpAsync(_file!); // _file is not null here, checked above
                },
                Iterations = _numberOfIterations
            };
            
            _benchmarkResult = await BenchmarkService.RunBenchmarkAsync(request);
            SetChartSeries();
            _isBenchmarkRunning = false;
        }
        catch (Exception e)
        {
            _error = e.Message;
            _isLoading = false;
            _benchmarkResult = null;
            _isBenchmarkRunning = false;
        }
    }

    private void SetChartSeries()
    {
        if (_benchmarkResult == null)
        {
            _chartSeries = null;
            _xAxisLabels = null;
            return;
        }
        
        _chartSeries = new List<ChartSeries>
        {
            new ChartSeries
            {
                Name = "Execution Times",
                Data = _benchmarkResult.ExecutionTimes.ToArray()
            }
        };
        
        int ticks = (int)(_benchmarkResult.ExecutionTimes.Max() / _benchmarkResult.ExecutionTimes.Min()) / 5;

        _chartOptions = new ChartOptions()
        {
            YAxisTicks = ticks,
            YAxisFormat = "F1"
        };

        // set x-axis labels for each iteration run. Take the index and add 1 to get the iteration number
        _xAxisLabels = _benchmarkResult.ExecutionTimes.Select((_, i) => (i + 1).ToString()).ToArray();
    }
}
