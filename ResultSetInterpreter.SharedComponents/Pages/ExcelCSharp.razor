@page "/excelcsharp"
@using ResultSetInterpreter.Services.Interfaces
@using ResultSetInterpreter.Models.Benchmark

<h1>Hello, world!</h1>

<br />

<button class="btn btn-primary" @onclick="PickFile">Pick File</button>

<br />

@if (_isLoading)
{
    <h4>Loading...</h4>
}

@if (_error != null)
{
    <h3 class="alert-danger">@_error</h3>
}

@if(_result != null)
{
    <pre>@_result</pre>
}

<h3>Benchmark</h3>
<br/>
<input type="number" @bind="_numberOfIterations" class="form-control"/>
<br/>
<button class="btn btn-secondary" @onclick="RunBenchmark">Run Benchmark</button>

@if (_isBenchmarkRunning)
{
    <br />
    <h4>Running Benchmark...</h4>
}

@if (_benchmarkResult != null)
{
    <p>Average Runtime: @_benchmarkResult.AverageTime</p>
    <p>Lowest Runtime: @_benchmarkResult.MinTime</p>
    <p>Median Runtime: @_benchmarkResult.MedianTime</p>
    <p>Highest Runtime: @_benchmarkResult.MaxTime</p>
    
    <br />
    
    <table class="table">
        <thead>
        <tr>
            <th>Iteration</th>
            <th>Runtime</th>
        </tr>
        </thead>
        @for (int i = 0; i < _benchmarkResult.ExecutionTimes.Count; i++)
        {
            <tr>
                <td>@(i + 1)</td>
                <td>@(_benchmarkResult.ExecutionTimes[i])</td>
            </tr>
        }
    </table>
}


@code {

    [Inject] public IExcelToCSharpService ExcelToCSharpService { get; set; } = default!;
    [Inject] public IFilePickerService FilePicker { get; set; } = default!;
    [Inject] public IBenchmarkService BenchmarkService { get; set; } = default!;

    private Stream? _file = null;
    private int _numberOfIterations = 1;
    private BenchmarkResult? _benchmarkResult = null;
    private bool _isBenchmarkRunning;
    
    private string? _result;
    private string? _error;
    private bool _isLoading;
    
    public async Task PickFile()
    {
        _isLoading = true;
        _result = null;
        _error = null;
        try
        {
            _file = await FilePicker.PickFileAsync();

            if (_file == null)
            {
                throw new Exception("No File Selected");
            }
            
            _result = await ExcelToCSharpService.ConvertExcelToCSharpAsync(_file);
            
        }
        catch (Exception e)
        {
            _error = e.Message;
        }

        _isLoading = false;
    }

    public async Task RunBenchmark()
    {
        try
        {
            // Validate there is a file loaded
            if (_file == null)
            {
                _error = "Cannot run benchmark, no file selected";
                return;
            }
            
            // Validate number of iterations is 1 or greater
            if (_numberOfIterations < 1)
            {
                _error = "Number of iterations must be 1 or greater";
                return;
            }
            
            _isBenchmarkRunning = true;
            _error = null;
            _benchmarkResult = null;

            BenchmarkRequest request = new()
            {
                Method = async () =>
                {
                    await ExcelToCSharpService.ConvertExcelToCSharpAsync(_file!); // _file is not null here, checked above
                },
                Iterations = _numberOfIterations
            };
            
            _benchmarkResult = await BenchmarkService.RunBenchmarkAsync(request);
            _isBenchmarkRunning = false;
        }
        catch (Exception e)
        {
            _error = e.Message;
            _isLoading = false;
            _benchmarkResult = null;
            _isBenchmarkRunning = false;
        }
    }
}
