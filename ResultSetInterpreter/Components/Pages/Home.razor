@page "/"
@using ResultSetInterpreter.Services.Interfaces

<h1>Hello, world!</h1>

<br />

<button class="btn btn-primary" @onclick="PickFile">Pick File</button>

@if (_isLoading)
{
    <h4>Loading...</h4>
}

@if (_error != null)
{
    <h3 class="alert-danger">@_error</h3>
}

@if(_result != null)
{
    <pre>@_result</pre>
}

<button class="btn btn-secondary" @onclick="ToggleDebugResult">Toggle Debug</button>

@if (_showDebugResult)
{
    <pre>@_debugResult</pre>
}

@code {

    [Inject] public IExcelToCSharpService ExcelToCSharpService { get; set; } = default!;
    [Inject] public IFilePickerService FilePicker { get; set; } = default!;
    
    private string? _result;
    private string? _debugResult;
    private bool _showDebugResult = false;
    private string? _error;
    private bool _isLoading;

    public async Task PickFile()
    {
        _isLoading = true;
        _result = null;
        _error = null;
        try
        {
            var file = await FilePicker.PickFileAsync();

            if (file == null)
            {
                throw new Exception("No File Selected");
            }
            
            _result = await ExcelToCSharpService.ConvertExcelToCSharpAsync(file);
            
        }
        catch (Exception e)
        {
            _error = e.Message;
        }

        _isLoading = false;
    }

    private void ToggleDebugResult()
    {
        _showDebugResult = !_showDebugResult;

        if (_showDebugResult)
        {
            _debugResult = _result != null ? _result.Replace("\n", "\\n") : "No result to show";
        }
    }
}
