@page "/"
@using ResultSetInterpreter.Models.Benchmark
@using ResultSetInterpreter.Services.Interfaces

<h1>Hello, world!</h1>

<br />


<InputFile OnChange="UploadFile" class="form-control" />

@if (_fileStream != null)
{
    <br/>
    <button class="btn btn-secondary" @onclick="ConvertFile">Convert Benchmark</button>
}

<br />

@if (_isLoading)
{
    <h4>Loading...</h4>
}

@if (_error != null)
{
    <h3 class="alert-danger">@_error</h3>
}

@if(_result != null)
{
    <pre>@_result</pre>
}

<h3>Benchmark</h3>
<br/>
<input type="number" @bind="_numberOfIterations" class="form-control"/>
<br/>
<button class="btn btn-secondary" @onclick="RunBenchmark">Run Benchmark</button>

@if (_isBenchmarkRunning)
{
    <br />
    <h4>Running Benchmark...</h4>
}

@if (_benchmarkResult != null)
{
    <p>Average Runtime: @_benchmarkResult.AverageTime</p>
    <p>Lowest Runtime: @_benchmarkResult.MinTime</p>
    <p>Median Runtime: @_benchmarkResult.MedianTime</p>
    <p>Highest Runtime: @_benchmarkResult.MaxTime</p>
    
    <br />
    
    <table class="table">
        <thead>
        <tr>
            <th>Iteration</th>
            <th>Runtime</th>
        </tr>
        </thead>
        @for (int i = 0; i < _benchmarkResult.ExecutionTimes.Count; i++)
        {
            <tr>
                <td>@(i + 1)</td>
                <td>@(_benchmarkResult.ExecutionTimes[i])</td>
            </tr>
        }
    </table>
}

@code {
    [Inject] private IExcelToCSharpService ExcelToCSharpService { get; set; } = default!;
    [Inject] private IBenchmarkService BenchmarkService { get; set; } = default!;
    
    private bool _isLoading;
    private string? _error = null;
    private string? _result = null;
    private Stream? _fileStream = null;
    
    private int _numberOfIterations = 1;
    private bool _isBenchmarkRunning;
    BenchmarkResult? _benchmarkResult = null;

    private async Task UploadFile(InputFileChangeEventArgs e)
    {
        _isLoading = true;
        _error = null;
        _result = null;
        _fileStream = null;

        var file = e.GetMultipleFiles().FirstOrDefault();
        if (file == null)
        {
            _error = "No file selected";
            _isLoading = false;
            return;
        }

        try
        {
            var stream = file.OpenReadStream();
            
            _fileStream = stream;

            _isLoading = false;

        }
        catch (Exception ex)
        {
            _error = ex.Message;
            _isLoading = false;
        }        
    }

    private async Task ConvertFile()
    {
        try
        {
            // reset state
            _isLoading = false;
            _error = null;
            _result = null;
            
            // Validate a file has been loaded
            if (_fileStream == null)
            {
                _error = "No file selected";
                return;
            }

            _isLoading = true;
            
            _result = await ExcelToCSharpService.ConvertExcelToCSharpAsync(_fileStream);

            _isLoading = false;
        }
        catch (Exception e)
        {
            _error = e.Message;
            _isLoading = false;
        }
    }
    
    private async Task RunBenchmark()
    {
        _error = "Test Test Test";
    }

}